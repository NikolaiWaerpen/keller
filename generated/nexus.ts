/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { ContextType } from "./../schema/index"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateGreetingInput: { // input type
    comment: string; // String!
    title: string; // String!
  }
  DeleteGreetingInput: { // input type
    id: number; // Int!
  }
  EditGreetingInput: { // input type
    comment: string; // String!
    id: number; // Int!
    title: string; // String!
  }
  GetBotTrades: { // input type
    addresses: string[]; // [String!]!
  }
  GetUserInput: { // input type
    email: string; // String!
  }
  RunBotInput: { // input type
    run: boolean; // Boolean!
  }
  SendTrumpQuoteInput: { // input type
    recipent: string; // String!
    tag: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  BotTrades: { // root type
    buy: string; // String!
    buyDate: string; // String!
    collection: string; // String!
    fees: string; // String!
    link: string; // String!
    profit?: string | null; // String
    profitMargin?: string | null; // String
    sell?: string | null; // String
    sellDate?: string | null; // String
    tokenId: string; // String!
  }
  Greeting: { // root type
    comment: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    title: string; // String!
  }
  Mutation: {};
  Query: {};
  RunBot: { // root type
    running: boolean; // Boolean!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    image: string; // String!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  BotTrades: { // field return type
    buy: string; // String!
    buyDate: string; // String!
    collection: string; // String!
    fees: string; // String!
    link: string; // String!
    profit: string | null; // String
    profitMargin: string | null; // String
    sell: string | null; // String
    sellDate: string | null; // String
    tokenId: string; // String!
  }
  Greeting: { // field return type
    author: NexusGenRootTypes['User']; // User!
    comment: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    title: string; // String!
  }
  Mutation: { // field return type
    createGreeting: NexusGenRootTypes['Greeting'] | null; // Greeting
    deleteGreeting: NexusGenRootTypes['Greeting'] | null; // Greeting
    editGreeting: NexusGenRootTypes['Greeting'] | null; // Greeting
    killBot: NexusGenRootTypes['RunBot'] | null; // RunBot
    runBot: NexusGenRootTypes['RunBot'] | null; // RunBot
    sendTrumpQuote: string; // String!
  }
  Query: { // field return type
    botTrades: NexusGenRootTypes['BotTrades'][]; // [BotTrades!]!
    greetings: NexusGenRootTypes['Greeting'][]; // [Greeting!]!
    tags: string[]; // [String!]!
    user: NexusGenRootTypes['User']; // User!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  RunBot: { // field return type
    running: boolean; // Boolean!
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    image: string; // String!
    name: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  BotTrades: { // field return type name
    buy: 'String'
    buyDate: 'String'
    collection: 'String'
    fees: 'String'
    link: 'String'
    profit: 'String'
    profitMargin: 'String'
    sell: 'String'
    sellDate: 'String'
    tokenId: 'String'
  }
  Greeting: { // field return type name
    author: 'User'
    comment: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    title: 'String'
  }
  Mutation: { // field return type name
    createGreeting: 'Greeting'
    deleteGreeting: 'Greeting'
    editGreeting: 'Greeting'
    killBot: 'RunBot'
    runBot: 'RunBot'
    sendTrumpQuote: 'String'
  }
  Query: { // field return type name
    botTrades: 'BotTrades'
    greetings: 'Greeting'
    tags: 'String'
    user: 'User'
    users: 'User'
  }
  RunBot: { // field return type name
    running: 'Boolean'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    image: 'String'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createGreeting: { // args
      input: NexusGenInputs['CreateGreetingInput']; // CreateGreetingInput!
    }
    deleteGreeting: { // args
      input: NexusGenInputs['DeleteGreetingInput']; // DeleteGreetingInput!
    }
    editGreeting: { // args
      input: NexusGenInputs['EditGreetingInput']; // EditGreetingInput!
    }
    sendTrumpQuote: { // args
      input: NexusGenInputs['SendTrumpQuoteInput']; // SendTrumpQuoteInput!
    }
  }
  Query: {
    botTrades: { // args
      input: NexusGenInputs['GetBotTrades']; // GetBotTrades!
    }
    user: { // args
      input: NexusGenInputs['GetUserInput']; // GetUserInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ContextType;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}